/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// CommandCarryOverPolicy struct for CommandCarryOverPolicy
type CommandCarryOverPolicy struct {
	CommandCarryOverType *string `json:"commandCarryOverType,omitempty"`
}

// NewCommandCarryOverPolicy instantiates a new CommandCarryOverPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandCarryOverPolicy() *CommandCarryOverPolicy {
	this := CommandCarryOverPolicy{}
	return &this
}

// NewCommandCarryOverPolicyWithDefaults instantiates a new CommandCarryOverPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandCarryOverPolicyWithDefaults() *CommandCarryOverPolicy {
	this := CommandCarryOverPolicy{}
	return &this
}

// GetCommandCarryOverType returns the CommandCarryOverType field value if set, zero value otherwise.
func (o *CommandCarryOverPolicy) GetCommandCarryOverType() string {
	if o == nil || o.CommandCarryOverType == nil {
		var ret string
		return ret
	}
	return *o.CommandCarryOverType
}

// GetCommandCarryOverTypeOk returns a tuple with the CommandCarryOverType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandCarryOverPolicy) GetCommandCarryOverTypeOk() (*string, bool) {
	if o == nil || o.CommandCarryOverType == nil {
		return nil, false
	}
	return o.CommandCarryOverType, true
}

// HasCommandCarryOverType returns a boolean if a field has been set.
func (o *CommandCarryOverPolicy) HasCommandCarryOverType() bool {
	if o != nil && o.CommandCarryOverType != nil {
		return true
	}

	return false
}

// SetCommandCarryOverType gets a reference to the given string and assigns it to the CommandCarryOverType field.
func (o *CommandCarryOverPolicy) SetCommandCarryOverType(v string) {
	o.CommandCarryOverType = &v
}

func (o CommandCarryOverPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommandCarryOverType != nil {
		toSerialize["commandCarryOverType"] = o.CommandCarryOverType
	}
	return json.Marshal(toSerialize)
}

type NullableCommandCarryOverPolicy struct {
	value *CommandCarryOverPolicy
	isSet bool
}

func (v NullableCommandCarryOverPolicy) Get() *CommandCarryOverPolicy {
	return v.value
}

func (v *NullableCommandCarryOverPolicy) Set(val *CommandCarryOverPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandCarryOverPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandCarryOverPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandCarryOverPolicy(val *CommandCarryOverPolicy) *NullableCommandCarryOverPolicy {
	return &NullableCommandCarryOverPolicy{value: val, isSet: true}
}

func (v NullableCommandCarryOverPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandCarryOverPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


